2024-09-16 19:03:42,606:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-16 19:03:42,606:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-16 19:03:42,606:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-16 19:03:42,606:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-16 19:04:24,574:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-16 19:04:24,584:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-16 19:04:24,585:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-16 19:04:24,586:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-09-16 19:05:39,456:INFO:PyCaret ClassificationExperiment
2024-09-16 19:05:39,456:INFO:Logging name: clf-default-name
2024-09-16 19:05:39,457:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-09-16 19:05:39,457:INFO:version 3.3.2
2024-09-16 19:05:39,457:INFO:Initializing setup()
2024-09-16 19:05:39,457:INFO:self.USI: d979
2024-09-16 19:05:39,457:INFO:self._variable_keys: {'fold_shuffle_param', '_available_plots', 'n_jobs_param', '_ml_usecase', 'is_multiclass', 'exp_id', 'USI', 'gpu_n_jobs_param', 'fold_generator', 'X', 'X_test', 'logging_param', 'y', 'log_plots_param', 'idx', 'gpu_param', 'data', 'seed', 'pipeline', 'fold_groups_param', 'html_param', 'y_test', 'y_train', 'X_train', 'memory', 'target_param', 'exp_name_log', 'fix_imbalance'}
2024-09-16 19:05:39,457:INFO:Checking environment
2024-09-16 19:05:39,457:INFO:python_version: 3.9.13
2024-09-16 19:05:39,457:INFO:python_build: ('main', 'Aug 25 2022 23:51:50')
2024-09-16 19:05:39,457:INFO:machine: AMD64
2024-09-16 19:05:39,457:INFO:platform: Windows-10-10.0.19045-SP0
2024-09-16 19:05:39,457:INFO:Memory: svmem(total=8463306752, available=1726992384, percent=79.6, used=6736314368, free=1726992384)
2024-09-16 19:05:39,457:INFO:Physical Core: 4
2024-09-16 19:05:39,457:INFO:Logical Core: 8
2024-09-16 19:05:39,457:INFO:Checking libraries
2024-09-16 19:05:39,457:INFO:System:
2024-09-16 19:05:39,457:INFO:    python: 3.9.13 (main, Aug 25 2022, 23:51:50) [MSC v.1916 64 bit (AMD64)]
2024-09-16 19:05:39,458:INFO:executable: C:\Users\DELL\anaconda3\python.exe
2024-09-16 19:05:39,458:INFO:   machine: Windows-10-10.0.19045-SP0
2024-09-16 19:05:39,458:INFO:PyCaret required dependencies:
2024-09-16 19:05:39,462:INFO:                 pip: 23.3
2024-09-16 19:05:39,462:INFO:          setuptools: 64.0.2
2024-09-16 19:05:39,462:INFO:             pycaret: 3.3.2
2024-09-16 19:05:39,462:INFO:             IPython: 7.31.1
2024-09-16 19:05:39,462:INFO:          ipywidgets: 7.6.5
2024-09-16 19:05:39,463:INFO:                tqdm: 4.64.1
2024-09-16 19:05:39,463:INFO:               numpy: 1.23.5
2024-09-16 19:05:39,463:INFO:              pandas: 1.4.4
2024-09-16 19:05:39,463:INFO:              jinja2: 3.1.2
2024-09-16 19:05:39,463:INFO:               scipy: 1.11.4
2024-09-16 19:05:39,463:INFO:              joblib: 1.2.0
2024-09-16 19:05:39,463:INFO:             sklearn: 1.4.2
2024-09-16 19:05:39,463:INFO:                pyod: 2.0.2
2024-09-16 19:05:39,463:INFO:            imblearn: 0.12.3
2024-09-16 19:05:39,463:INFO:   category_encoders: 2.6.0
2024-09-16 19:05:39,463:INFO:            lightgbm: 3.3.5
2024-09-16 19:05:39,463:INFO:               numba: 0.56.3
2024-09-16 19:05:39,464:INFO:            requests: 2.32.3
2024-09-16 19:05:39,464:INFO:          matplotlib: 3.7.5
2024-09-16 19:05:39,464:INFO:          scikitplot: 0.3.7
2024-09-16 19:05:39,464:INFO:         yellowbrick: 1.5
2024-09-16 19:05:39,464:INFO:              plotly: 5.22.0
2024-09-16 19:05:39,464:INFO:    plotly-resampler: Not installed
2024-09-16 19:05:39,464:INFO:             kaleido: 0.2.1
2024-09-16 19:05:39,464:INFO:           schemdraw: 0.15
2024-09-16 19:05:39,464:INFO:         statsmodels: 0.13.2
2024-09-16 19:05:39,464:INFO:              sktime: 0.26.0
2024-09-16 19:05:39,464:INFO:               tbats: 1.1.3
2024-09-16 19:05:39,465:INFO:            pmdarima: 2.0.4
2024-09-16 19:05:39,465:INFO:              psutil: 5.9.0
2024-09-16 19:05:39,465:INFO:          markupsafe: 2.1.2
2024-09-16 19:05:39,465:INFO:             pickle5: Not installed
2024-09-16 19:05:39,465:INFO:         cloudpickle: 2.0.0
2024-09-16 19:05:39,465:INFO:         deprecation: 2.1.0
2024-09-16 19:05:39,465:INFO:              xxhash: 3.2.0
2024-09-16 19:05:39,465:INFO:           wurlitzer: Not installed
2024-09-16 19:05:39,465:INFO:PyCaret optional dependencies:
2024-09-16 19:05:46,692:INFO:                shap: Not installed
2024-09-16 19:05:46,692:INFO:           interpret: Not installed
2024-09-16 19:05:46,692:INFO:                umap: Not installed
2024-09-16 19:05:46,692:INFO:     ydata_profiling: Not installed
2024-09-16 19:05:46,692:INFO:  explainerdashboard: Not installed
2024-09-16 19:05:46,692:INFO:             autoviz: Not installed
2024-09-16 19:05:46,692:INFO:           fairlearn: Not installed
2024-09-16 19:05:46,692:INFO:          deepchecks: Not installed
2024-09-16 19:05:46,692:INFO:             xgboost: 1.7.6
2024-09-16 19:05:46,692:INFO:            catboost: Not installed
2024-09-16 19:05:46,692:INFO:              kmodes: Not installed
2024-09-16 19:05:46,692:INFO:             mlxtend: Not installed
2024-09-16 19:05:46,692:INFO:       statsforecast: Not installed
2024-09-16 19:05:46,692:INFO:        tune_sklearn: Not installed
2024-09-16 19:05:46,692:INFO:                 ray: Not installed
2024-09-16 19:05:46,692:INFO:            hyperopt: 0.2.7
2024-09-16 19:05:46,692:INFO:              optuna: Not installed
2024-09-16 19:05:46,693:INFO:               skopt: Not installed
2024-09-16 19:05:46,693:INFO:              mlflow: Not installed
2024-09-16 19:05:46,693:INFO:              gradio: 4.41.0
2024-09-16 19:05:46,693:INFO:             fastapi: 0.104.0
2024-09-16 19:05:46,693:INFO:             uvicorn: 0.23.2
2024-09-16 19:05:46,693:INFO:              m2cgen: Not installed
2024-09-16 19:05:46,693:INFO:           evidently: Not installed
2024-09-16 19:05:46,693:INFO:               fugue: Not installed
2024-09-16 19:05:46,693:INFO:           streamlit: 1.24.1
2024-09-16 19:05:46,693:INFO:             prophet: 1.1.2
2024-09-16 19:05:46,693:INFO:None
2024-09-16 19:05:46,693:INFO:Set up data.
2024-09-16 19:05:46,717:INFO:Set up folding strategy.
2024-09-16 19:05:46,717:INFO:Set up train/test split.
2024-09-16 19:05:46,743:INFO:Set up index.
2024-09-16 19:05:46,743:INFO:Assigning column types.
2024-09-16 19:05:46,750:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-09-16 19:05:46,803:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-16 19:05:46,806:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-16 19:05:46,843:INFO:Soft dependency imported: xgboost: 1.7.6
2024-09-16 19:05:46,987:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-16 19:05:47,047:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-09-16 19:05:47,048:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-16 19:05:47,082:INFO:Soft dependency imported: xgboost: 1.7.6
2024-09-16 19:05:47,086:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-16 19:05:47,086:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-09-16 19:05:47,142:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-16 19:05:47,178:INFO:Soft dependency imported: xgboost: 1.7.6
2024-09-16 19:05:47,181:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-16 19:05:47,231:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-09-16 19:05:47,260:INFO:Soft dependency imported: xgboost: 1.7.6
2024-09-16 19:05:47,263:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-16 19:05:47,263:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-09-16 19:05:47,381:INFO:Soft dependency imported: xgboost: 1.7.6
2024-09-16 19:05:47,384:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-16 19:05:47,585:INFO:Soft dependency imported: xgboost: 1.7.6
2024-09-16 19:05:47,612:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-16 19:05:47,644:INFO:Preparing preprocessing pipeline...
2024-09-16 19:05:47,656:INFO:Set up label encoding.
2024-09-16 19:05:47,657:INFO:Set up simple imputation.
2024-09-16 19:05:47,720:INFO:Set up encoding of ordinal features.
2024-09-16 19:05:47,779:INFO:Set up encoding of categorical features.
2024-09-16 19:05:47,786:INFO:Set up column name cleaning.
2024-09-16 19:05:50,263:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:249: UserWarning: Persisting input arguments took 0.76s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_transformer = self._memory_fit(

2024-09-16 19:05:51,453:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py:256: UserWarning: Persisting input arguments took 0.67s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, y = self._memory_transform(

2024-09-16 19:05:51,664:INFO:Finished creating preprocessing pipeline.
2024-09-16 19:05:51,718:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Tumor Size',
                                             'Regional Node Examined',
                                             'Reginol Node Positive',
                                             'Survival Months'],
                                    transformer=SimpleIm...
                                    transformer=OneHotEncoder(cols=['Race',
                                                                    'Marital '
                                                                    'Status',
                                                                    'T Stage ',
                                                                    'N Stage',
                                                                    '6th Stage',
                                                                    'differentiate',
                                                                    'Grade'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-09-16 19:05:51,718:INFO:Creating final display dataframe.
2024-09-16 19:05:52,260:INFO:Setup _display_container:                     Description              Value
0                    Session id               2469
1                        Target             Status
2                   Target type             Binary
3                Target mapping  Alive: 0, Dead: 1
4           Original data shape         (4023, 16)
5        Transformed data shape         (4023, 37)
6   Transformed train set shape         (2816, 37)
7    Transformed test set shape         (1207, 37)
8              Numeric features                  5
9          Categorical features                 10
10                   Preprocess               True
11              Imputation type             simple
12           Numeric imputation               mean
13       Categorical imputation               mode
14     Maximum one-hot encoding                 25
15              Encoding method               None
16               Fold Generator    StratifiedKFold
17                  Fold Number                 10
18                     CPU Jobs                 -1
19                      Use GPU              False
20               Log Experiment              False
21              Experiment Name   clf-default-name
22                          USI               d979
2024-09-16 19:05:52,366:INFO:Soft dependency imported: xgboost: 1.7.6
2024-09-16 19:05:52,368:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-16 19:05:52,450:INFO:Soft dependency imported: xgboost: 1.7.6
2024-09-16 19:05:52,453:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-09-16 19:05:52,454:INFO:setup() successfully completed in 13.0s...............
2024-09-16 19:06:07,215:INFO:Initializing compare_models()
2024-09-16 19:06:07,216:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-09-16 19:06:07,216:INFO:Checking exceptions
2024-09-16 19:06:07,222:INFO:Preparing display monitor
2024-09-16 19:06:07,276:INFO:Initializing Logistic Regression
2024-09-16 19:06:07,276:INFO:Total runtime is 0.0 minutes
2024-09-16 19:06:07,281:INFO:SubProcess create_model() called ==================================
2024-09-16 19:06:07,282:INFO:Initializing create_model()
2024-09-16 19:06:07,282:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217E6B65FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-16 19:06:07,283:INFO:Checking exceptions
2024-09-16 19:06:07,283:INFO:Importing libraries
2024-09-16 19:06:07,283:INFO:Copying training dataset
2024-09-16 19:06:07,289:INFO:Defining folds
2024-09-16 19:06:07,289:INFO:Declaring metric variables
2024-09-16 19:06:07,293:INFO:Importing untrained model
2024-09-16 19:06:07,298:INFO:Logistic Regression Imported successfully
2024-09-16 19:06:07,308:INFO:Starting cross validation
2024-09-16 19:06:07,310:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-16 19:06:59,810:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-09-16 19:06:59,982:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-09-16 19:07:00,012:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,024:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,044:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,178:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,196:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,211:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,246:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,259:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,270:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,298:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-09-16 19:07:00,310:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-09-16 19:07:00,337:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-09-16 19:07:00,467:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,478:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,481:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,487:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,491:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,499:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,522:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,533:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,543:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,668:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,677:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,686:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,732:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,740:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:00,746:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:02,864:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:02,917:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:02,978:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:03,769:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:03,806:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:03,843:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:03,902:INFO:Calculating mean and std
2024-09-16 19:07:03,919:INFO:Creating metrics dataframe
2024-09-16 19:07:03,962:INFO:Uploading results into container
2024-09-16 19:07:03,969:INFO:Uploading model into container now
2024-09-16 19:07:03,974:INFO:_master_model_container: 1
2024-09-16 19:07:03,976:INFO:_display_container: 2
2024-09-16 19:07:03,983:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2469, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-09-16 19:07:03,988:INFO:create_model() successfully completed......................................
2024-09-16 19:07:04,897:INFO:SubProcess create_model() end ==================================
2024-09-16 19:07:04,898:INFO:Creating metrics dataframe
2024-09-16 19:07:04,935:INFO:Initializing K Neighbors Classifier
2024-09-16 19:07:04,935:INFO:Total runtime is 0.9609861811002095 minutes
2024-09-16 19:07:04,947:INFO:SubProcess create_model() called ==================================
2024-09-16 19:07:04,949:INFO:Initializing create_model()
2024-09-16 19:07:04,949:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217E6B65FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-16 19:07:04,950:INFO:Checking exceptions
2024-09-16 19:07:04,950:INFO:Importing libraries
2024-09-16 19:07:04,950:INFO:Copying training dataset
2024-09-16 19:07:04,966:INFO:Defining folds
2024-09-16 19:07:04,967:INFO:Declaring metric variables
2024-09-16 19:07:04,976:INFO:Importing untrained model
2024-09-16 19:07:04,984:INFO:K Neighbors Classifier Imported successfully
2024-09-16 19:07:04,997:INFO:Starting cross validation
2024-09-16 19:07:05,000:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-16 19:07:05,698:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,700:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,706:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,708:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,712:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,712:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,713:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,715:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,717:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,720:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,721:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,725:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,727:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,732:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,741:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,756:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,760:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,761:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,765:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,767:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:05,774:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:06,072:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:06,075:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:06,078:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:06,081:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:06,085:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:06,088:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:06,097:INFO:Calculating mean and std
2024-09-16 19:07:06,099:INFO:Creating metrics dataframe
2024-09-16 19:07:06,104:INFO:Uploading results into container
2024-09-16 19:07:06,105:INFO:Uploading model into container now
2024-09-16 19:07:06,106:INFO:_master_model_container: 2
2024-09-16 19:07:06,106:INFO:_display_container: 2
2024-09-16 19:07:06,107:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-09-16 19:07:06,107:INFO:create_model() successfully completed......................................
2024-09-16 19:07:06,615:INFO:SubProcess create_model() end ==================================
2024-09-16 19:07:06,616:INFO:Creating metrics dataframe
2024-09-16 19:07:06,725:INFO:Initializing Naive Bayes
2024-09-16 19:07:06,727:INFO:Total runtime is 0.9908440192540486 minutes
2024-09-16 19:07:06,761:INFO:SubProcess create_model() called ==================================
2024-09-16 19:07:06,767:INFO:Initializing create_model()
2024-09-16 19:07:06,768:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217E6B65FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-16 19:07:06,769:INFO:Checking exceptions
2024-09-16 19:07:06,770:INFO:Importing libraries
2024-09-16 19:07:06,771:INFO:Copying training dataset
2024-09-16 19:07:06,844:INFO:Defining folds
2024-09-16 19:07:06,845:INFO:Declaring metric variables
2024-09-16 19:07:06,892:INFO:Importing untrained model
2024-09-16 19:07:06,942:INFO:Naive Bayes Imported successfully
2024-09-16 19:07:07,056:INFO:Starting cross validation
2024-09-16 19:07:07,091:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-16 19:07:10,931:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:10,961:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:11,010:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:11,037:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:11,096:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:11,109:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:11,142:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:11,202:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:11,286:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:11,338:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:11,400:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:11,483:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:11,959:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:12,007:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:12,020:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:12,066:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:12,076:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:12,125:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:12,136:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:12,214:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:12,281:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:12,282:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:12,345:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:12,402:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,098:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,105:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,105:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,112:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,112:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,122:INFO:Calculating mean and std
2024-09-16 19:07:13,123:INFO:Creating metrics dataframe
2024-09-16 19:07:13,128:INFO:Uploading results into container
2024-09-16 19:07:13,128:INFO:Uploading model into container now
2024-09-16 19:07:13,129:INFO:_master_model_container: 3
2024-09-16 19:07:13,129:INFO:_display_container: 2
2024-09-16 19:07:13,129:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-09-16 19:07:13,130:INFO:create_model() successfully completed......................................
2024-09-16 19:07:13,370:INFO:SubProcess create_model() end ==================================
2024-09-16 19:07:13,370:INFO:Creating metrics dataframe
2024-09-16 19:07:13,390:INFO:Initializing Decision Tree Classifier
2024-09-16 19:07:13,390:INFO:Total runtime is 1.1018998503684998 minutes
2024-09-16 19:07:13,397:INFO:SubProcess create_model() called ==================================
2024-09-16 19:07:13,398:INFO:Initializing create_model()
2024-09-16 19:07:13,398:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217E6B65FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-16 19:07:13,398:INFO:Checking exceptions
2024-09-16 19:07:13,399:INFO:Importing libraries
2024-09-16 19:07:13,399:INFO:Copying training dataset
2024-09-16 19:07:13,407:INFO:Defining folds
2024-09-16 19:07:13,407:INFO:Declaring metric variables
2024-09-16 19:07:13,414:INFO:Importing untrained model
2024-09-16 19:07:13,419:INFO:Decision Tree Classifier Imported successfully
2024-09-16 19:07:13,429:INFO:Starting cross validation
2024-09-16 19:07:13,432:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-16 19:07:13,918:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,920:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,927:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,929:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,934:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,935:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,936:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,938:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,940:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,945:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,945:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,946:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,946:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,949:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,952:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,956:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,957:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,959:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,960:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:13,971:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:14,003:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:14,010:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:14,018:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:14,304:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:14,364:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:14,427:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:14,439:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:14,506:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:14,550:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:14,633:INFO:Calculating mean and std
2024-09-16 19:07:14,650:INFO:Creating metrics dataframe
2024-09-16 19:07:14,693:INFO:Uploading results into container
2024-09-16 19:07:14,701:INFO:Uploading model into container now
2024-09-16 19:07:14,707:INFO:_master_model_container: 4
2024-09-16 19:07:14,708:INFO:_display_container: 2
2024-09-16 19:07:14,714:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=2469, splitter='best')
2024-09-16 19:07:14,716:INFO:create_model() successfully completed......................................
2024-09-16 19:07:15,709:INFO:SubProcess create_model() end ==================================
2024-09-16 19:07:15,711:INFO:Creating metrics dataframe
2024-09-16 19:07:15,857:INFO:Initializing SVM - Linear Kernel
2024-09-16 19:07:15,859:INFO:Total runtime is 1.1430399298667908 minutes
2024-09-16 19:07:15,920:INFO:SubProcess create_model() called ==================================
2024-09-16 19:07:15,925:INFO:Initializing create_model()
2024-09-16 19:07:15,926:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217E6B65FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-16 19:07:15,927:INFO:Checking exceptions
2024-09-16 19:07:15,928:INFO:Importing libraries
2024-09-16 19:07:15,929:INFO:Copying training dataset
2024-09-16 19:07:16,008:INFO:Defining folds
2024-09-16 19:07:16,009:INFO:Declaring metric variables
2024-09-16 19:07:16,063:INFO:Importing untrained model
2024-09-16 19:07:16,123:INFO:SVM - Linear Kernel Imported successfully
2024-09-16 19:07:16,277:INFO:Starting cross validation
2024-09-16 19:07:16,312:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-16 19:07:22,032:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,141:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,195:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,269:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,271:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,272:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,327:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,337:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,380:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,410:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,444:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,527:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,583:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,651:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,652:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,726:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,729:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,794:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,823:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,879:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,937:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:22,957:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:23,024:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:23,080:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,090:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,092:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,097:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,099:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,104:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,106:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,115:INFO:Calculating mean and std
2024-09-16 19:07:25,116:INFO:Creating metrics dataframe
2024-09-16 19:07:25,120:INFO:Uploading results into container
2024-09-16 19:07:25,121:INFO:Uploading model into container now
2024-09-16 19:07:25,121:INFO:_master_model_container: 5
2024-09-16 19:07:25,121:INFO:_display_container: 2
2024-09-16 19:07:25,122:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=2469, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-09-16 19:07:25,122:INFO:create_model() successfully completed......................................
2024-09-16 19:07:25,377:INFO:SubProcess create_model() end ==================================
2024-09-16 19:07:25,377:INFO:Creating metrics dataframe
2024-09-16 19:07:25,403:INFO:Initializing Ridge Classifier
2024-09-16 19:07:25,403:INFO:Total runtime is 1.3021048188209534 minutes
2024-09-16 19:07:25,411:INFO:SubProcess create_model() called ==================================
2024-09-16 19:07:25,411:INFO:Initializing create_model()
2024-09-16 19:07:25,412:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217E6B65FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-16 19:07:25,412:INFO:Checking exceptions
2024-09-16 19:07:25,412:INFO:Importing libraries
2024-09-16 19:07:25,412:INFO:Copying training dataset
2024-09-16 19:07:25,422:INFO:Defining folds
2024-09-16 19:07:25,423:INFO:Declaring metric variables
2024-09-16 19:07:25,428:INFO:Importing untrained model
2024-09-16 19:07:25,435:INFO:Ridge Classifier Imported successfully
2024-09-16 19:07:25,444:INFO:Starting cross validation
2024-09-16 19:07:25,446:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-16 19:07:25,905:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,905:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,910:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,912:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,913:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,913:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,914:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,917:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,920:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,920:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,920:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,921:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,924:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,927:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,928:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,929:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,932:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,936:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,939:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,941:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,944:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,946:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,950:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:25,955:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:26,232:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:26,238:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:26,239:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:26,245:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:26,245:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:26,252:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:26,259:INFO:Calculating mean and std
2024-09-16 19:07:26,261:INFO:Creating metrics dataframe
2024-09-16 19:07:26,264:INFO:Uploading results into container
2024-09-16 19:07:26,265:INFO:Uploading model into container now
2024-09-16 19:07:26,265:INFO:_master_model_container: 6
2024-09-16 19:07:26,265:INFO:_display_container: 2
2024-09-16 19:07:26,267:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=2469, solver='auto',
                tol=0.0001)
2024-09-16 19:07:26,267:INFO:create_model() successfully completed......................................
2024-09-16 19:07:26,945:INFO:SubProcess create_model() end ==================================
2024-09-16 19:07:26,946:INFO:Creating metrics dataframe
2024-09-16 19:07:27,112:INFO:Initializing Random Forest Classifier
2024-09-16 19:07:27,114:INFO:Total runtime is 1.3306332349777221 minutes
2024-09-16 19:07:27,156:INFO:SubProcess create_model() called ==================================
2024-09-16 19:07:27,159:INFO:Initializing create_model()
2024-09-16 19:07:27,160:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217E6B65FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-16 19:07:27,162:INFO:Checking exceptions
2024-09-16 19:07:27,164:INFO:Importing libraries
2024-09-16 19:07:27,164:INFO:Copying training dataset
2024-09-16 19:07:27,275:INFO:Defining folds
2024-09-16 19:07:27,276:INFO:Declaring metric variables
2024-09-16 19:07:27,331:INFO:Importing untrained model
2024-09-16 19:07:27,391:INFO:Random Forest Classifier Imported successfully
2024-09-16 19:07:27,547:INFO:Starting cross validation
2024-09-16 19:07:27,591:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-16 19:07:31,173:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,181:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,191:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,198:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,205:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,213:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,240:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,248:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,256:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,257:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,265:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,274:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,325:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,329:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,333:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,336:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,338:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,340:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,344:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,345:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,353:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,430:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,437:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:31,442:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:33,642:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:33,660:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:33,713:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:33,728:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:33,770:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:33,787:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:33,879:INFO:Calculating mean and std
2024-09-16 19:07:33,902:INFO:Creating metrics dataframe
2024-09-16 19:07:33,951:INFO:Uploading results into container
2024-09-16 19:07:33,957:INFO:Uploading model into container now
2024-09-16 19:07:33,963:INFO:_master_model_container: 7
2024-09-16 19:07:33,964:INFO:_display_container: 2
2024-09-16 19:07:33,970:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=2469, verbose=0,
                       warm_start=False)
2024-09-16 19:07:33,972:INFO:create_model() successfully completed......................................
2024-09-16 19:07:35,176:INFO:SubProcess create_model() end ==================================
2024-09-16 19:07:35,177:INFO:Creating metrics dataframe
2024-09-16 19:07:35,364:INFO:Initializing Quadratic Discriminant Analysis
2024-09-16 19:07:35,366:INFO:Total runtime is 1.468161694208781 minutes
2024-09-16 19:07:35,418:INFO:SubProcess create_model() called ==================================
2024-09-16 19:07:35,424:INFO:Initializing create_model()
2024-09-16 19:07:35,425:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217E6B65FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-16 19:07:35,427:INFO:Checking exceptions
2024-09-16 19:07:35,429:INFO:Importing libraries
2024-09-16 19:07:35,430:INFO:Copying training dataset
2024-09-16 19:07:35,559:INFO:Defining folds
2024-09-16 19:07:35,561:INFO:Declaring metric variables
2024-09-16 19:07:35,629:INFO:Importing untrained model
2024-09-16 19:07:35,692:INFO:Quadratic Discriminant Analysis Imported successfully
2024-09-16 19:07:35,837:INFO:Starting cross validation
2024-09-16 19:07:35,888:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-16 19:07:38,722:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-16 19:07:38,821:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-16 19:07:39,006:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-16 19:07:39,137:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-16 19:07:39,603:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-16 19:07:39,789:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:39,819:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:39,821:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-16 19:07:39,860:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:39,900:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:39,948:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:39,950:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:39,971:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:40,014:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:40,028:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-16 19:07:40,095:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:40,329:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-16 19:07:40,692:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:40,762:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:40,801:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:40,865:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:40,900:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:40,956:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:41,237:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:41,322:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:41,399:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:41,410:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:41,467:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:41,555:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:41,561:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:41,628:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:41,704:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:42,489:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-16 19:07:42,490:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-09-16 19:07:42,569:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:42,571:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:42,575:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:42,577:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:42,581:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:42,583:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:42,592:INFO:Calculating mean and std
2024-09-16 19:07:42,594:INFO:Creating metrics dataframe
2024-09-16 19:07:42,598:INFO:Uploading results into container
2024-09-16 19:07:42,598:INFO:Uploading model into container now
2024-09-16 19:07:42,599:INFO:_master_model_container: 8
2024-09-16 19:07:42,599:INFO:_display_container: 2
2024-09-16 19:07:42,599:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-09-16 19:07:42,600:INFO:create_model() successfully completed......................................
2024-09-16 19:07:42,857:INFO:SubProcess create_model() end ==================================
2024-09-16 19:07:42,857:INFO:Creating metrics dataframe
2024-09-16 19:07:42,882:INFO:Initializing Ada Boost Classifier
2024-09-16 19:07:42,883:INFO:Total runtime is 1.5934463938077292 minutes
2024-09-16 19:07:42,889:INFO:SubProcess create_model() called ==================================
2024-09-16 19:07:42,890:INFO:Initializing create_model()
2024-09-16 19:07:42,890:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217E6B65FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-16 19:07:42,890:INFO:Checking exceptions
2024-09-16 19:07:42,891:INFO:Importing libraries
2024-09-16 19:07:42,891:INFO:Copying training dataset
2024-09-16 19:07:42,899:INFO:Defining folds
2024-09-16 19:07:42,900:INFO:Declaring metric variables
2024-09-16 19:07:42,905:INFO:Importing untrained model
2024-09-16 19:07:42,910:INFO:Ada Boost Classifier Imported successfully
2024-09-16 19:07:42,920:INFO:Starting cross validation
2024-09-16 19:07:42,923:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-16 19:07:43,255:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-16 19:07:43,256:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-16 19:07:43,264:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-16 19:07:43,268:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-16 19:07:43,298:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-16 19:07:43,301:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-16 19:07:43,302:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-16 19:07:43,308:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-16 19:07:43,718:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,722:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,725:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,729:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,734:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,737:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,747:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,750:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,755:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,756:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,758:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,761:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,763:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,763:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,765:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,768:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,768:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,769:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,777:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,777:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,778:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,784:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,785:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:43,791:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:45,690:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-16 19:07:45,948:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-16 19:07:49,052:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:49,106:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:49,125:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:49,161:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:49,179:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:49,244:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:49,328:INFO:Calculating mean and std
2024-09-16 19:07:49,349:INFO:Creating metrics dataframe
2024-09-16 19:07:49,399:INFO:Uploading results into container
2024-09-16 19:07:49,410:INFO:Uploading model into container now
2024-09-16 19:07:49,418:INFO:_master_model_container: 9
2024-09-16 19:07:49,419:INFO:_display_container: 2
2024-09-16 19:07:49,426:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2469)
2024-09-16 19:07:49,428:INFO:create_model() successfully completed......................................
2024-09-16 19:07:50,527:INFO:SubProcess create_model() end ==================================
2024-09-16 19:07:50,527:INFO:Creating metrics dataframe
2024-09-16 19:07:50,548:INFO:Initializing Gradient Boosting Classifier
2024-09-16 19:07:50,549:INFO:Total runtime is 1.7212080558141074 minutes
2024-09-16 19:07:50,556:INFO:SubProcess create_model() called ==================================
2024-09-16 19:07:50,557:INFO:Initializing create_model()
2024-09-16 19:07:50,557:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217E6B65FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-16 19:07:50,557:INFO:Checking exceptions
2024-09-16 19:07:50,557:INFO:Importing libraries
2024-09-16 19:07:50,557:INFO:Copying training dataset
2024-09-16 19:07:50,565:INFO:Defining folds
2024-09-16 19:07:50,566:INFO:Declaring metric variables
2024-09-16 19:07:50,571:INFO:Importing untrained model
2024-09-16 19:07:50,577:INFO:Gradient Boosting Classifier Imported successfully
2024-09-16 19:07:50,588:INFO:Starting cross validation
2024-09-16 19:07:50,592:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-16 19:07:51,811:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:51,820:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:51,822:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:51,830:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:51,831:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:51,841:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:52,093:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:52,191:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:52,298:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:52,382:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:52,498:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:52,591:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:53,026:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:53,096:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:53,160:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:53,246:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:53,318:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:53,380:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:53,460:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:53,517:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:53,571:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:53,669:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:53,810:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:07:54,063:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:02,231:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:02,292:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:02,350:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:02,582:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:02,592:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:02,602:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:02,621:INFO:Calculating mean and std
2024-09-16 19:08:02,625:INFO:Creating metrics dataframe
2024-09-16 19:08:02,635:INFO:Uploading results into container
2024-09-16 19:08:02,637:INFO:Uploading model into container now
2024-09-16 19:08:02,639:INFO:_master_model_container: 10
2024-09-16 19:08:02,639:INFO:_display_container: 2
2024-09-16 19:08:02,641:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=2469, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-09-16 19:08:02,642:INFO:create_model() successfully completed......................................
2024-09-16 19:08:02,910:INFO:SubProcess create_model() end ==================================
2024-09-16 19:08:02,910:INFO:Creating metrics dataframe
2024-09-16 19:08:02,936:INFO:Initializing Linear Discriminant Analysis
2024-09-16 19:08:02,936:INFO:Total runtime is 1.9276638984680177 minutes
2024-09-16 19:08:02,945:INFO:SubProcess create_model() called ==================================
2024-09-16 19:08:02,945:INFO:Initializing create_model()
2024-09-16 19:08:02,946:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217E6B65FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-16 19:08:02,946:INFO:Checking exceptions
2024-09-16 19:08:02,946:INFO:Importing libraries
2024-09-16 19:08:02,946:INFO:Copying training dataset
2024-09-16 19:08:02,956:INFO:Defining folds
2024-09-16 19:08:02,956:INFO:Declaring metric variables
2024-09-16 19:08:02,962:INFO:Importing untrained model
2024-09-16 19:08:02,968:INFO:Linear Discriminant Analysis Imported successfully
2024-09-16 19:08:02,982:INFO:Starting cross validation
2024-09-16 19:08:02,985:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-16 19:08:03,467:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,470:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,473:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,475:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,475:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,477:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,479:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,480:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,481:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,482:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,482:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,484:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,486:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,486:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,487:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,488:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,491:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,495:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,497:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,498:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,504:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,505:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,511:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,512:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,824:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,830:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,838:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,842:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:03,849:INFO:Calculating mean and std
2024-09-16 19:08:03,852:INFO:Creating metrics dataframe
2024-09-16 19:08:03,855:INFO:Uploading results into container
2024-09-16 19:08:03,856:INFO:Uploading model into container now
2024-09-16 19:08:03,856:INFO:_master_model_container: 11
2024-09-16 19:08:03,857:INFO:_display_container: 2
2024-09-16 19:08:03,857:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-09-16 19:08:03,858:INFO:create_model() successfully completed......................................
2024-09-16 19:08:04,667:INFO:SubProcess create_model() end ==================================
2024-09-16 19:08:04,668:INFO:Creating metrics dataframe
2024-09-16 19:08:04,785:INFO:Initializing Extra Trees Classifier
2024-09-16 19:08:04,787:INFO:Total runtime is 1.9585112889607748 minutes
2024-09-16 19:08:04,834:INFO:SubProcess create_model() called ==================================
2024-09-16 19:08:04,837:INFO:Initializing create_model()
2024-09-16 19:08:04,839:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217E6B65FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-16 19:08:04,841:INFO:Checking exceptions
2024-09-16 19:08:04,842:INFO:Importing libraries
2024-09-16 19:08:04,842:INFO:Copying training dataset
2024-09-16 19:08:04,921:INFO:Defining folds
2024-09-16 19:08:04,923:INFO:Declaring metric variables
2024-09-16 19:08:04,983:INFO:Importing untrained model
2024-09-16 19:08:05,043:INFO:Extra Trees Classifier Imported successfully
2024-09-16 19:08:05,205:INFO:Starting cross validation
2024-09-16 19:08:05,233:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-16 19:08:08,608:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:08,618:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:08,669:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:08,777:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:08,784:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:08,792:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:08,855:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:08,864:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:08,877:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:08,900:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:08,910:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:08,921:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:08,949:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:08,958:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:08,967:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:09,004:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:09,009:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:09,011:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:09,014:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:09,018:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:09,080:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:09,087:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:09,094:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:11,177:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:11,234:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:11,291:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:11,347:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:11,412:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:11,450:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:11,509:INFO:Calculating mean and std
2024-09-16 19:08:11,533:INFO:Creating metrics dataframe
2024-09-16 19:08:11,579:INFO:Uploading results into container
2024-09-16 19:08:11,588:INFO:Uploading model into container now
2024-09-16 19:08:11,593:INFO:_master_model_container: 12
2024-09-16 19:08:11,594:INFO:_display_container: 2
2024-09-16 19:08:11,599:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=2469, verbose=0,
                     warm_start=False)
2024-09-16 19:08:11,600:INFO:create_model() successfully completed......................................
2024-09-16 19:08:12,477:INFO:SubProcess create_model() end ==================================
2024-09-16 19:08:12,478:INFO:Creating metrics dataframe
2024-09-16 19:08:12,599:INFO:Initializing Extreme Gradient Boosting
2024-09-16 19:08:12,601:INFO:Total runtime is 2.0887390255928038 minutes
2024-09-16 19:08:12,634:INFO:SubProcess create_model() called ==================================
2024-09-16 19:08:12,639:INFO:Initializing create_model()
2024-09-16 19:08:12,642:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217E6B65FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-16 19:08:12,643:INFO:Checking exceptions
2024-09-16 19:08:12,643:INFO:Importing libraries
2024-09-16 19:08:12,644:INFO:Copying training dataset
2024-09-16 19:08:12,707:INFO:Defining folds
2024-09-16 19:08:12,709:INFO:Declaring metric variables
2024-09-16 19:08:12,760:INFO:Importing untrained model
2024-09-16 19:08:12,807:INFO:Extreme Gradient Boosting Imported successfully
2024-09-16 19:08:12,935:INFO:Starting cross validation
2024-09-16 19:08:12,960:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-16 19:08:22,554:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:22,568:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:22,581:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:22,601:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:22,616:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:22,630:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:23,003:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:23,121:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:23,165:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:23,213:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:23,230:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:23,296:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:23,325:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:23,382:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:23,398:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:23,456:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:23,478:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:23,524:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:24,020:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:24,099:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:24,182:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:24,362:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:24,436:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:24,508:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:27,287:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:27,291:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:27,294:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:27,298:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:27,299:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:27,306:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:27,315:INFO:Calculating mean and std
2024-09-16 19:08:27,316:INFO:Creating metrics dataframe
2024-09-16 19:08:27,321:INFO:Uploading results into container
2024-09-16 19:08:27,321:INFO:Uploading model into container now
2024-09-16 19:08:27,322:INFO:_master_model_container: 13
2024-09-16 19:08:27,322:INFO:_display_container: 2
2024-09-16 19:08:27,324:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, gpu_id=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              n_estimators=100, n_jobs=-1, num_parallel_tree=None,
              objective='binary:logistic', predictor=None, ...)
2024-09-16 19:08:27,324:INFO:create_model() successfully completed......................................
2024-09-16 19:08:27,603:INFO:SubProcess create_model() end ==================================
2024-09-16 19:08:27,604:INFO:Creating metrics dataframe
2024-09-16 19:08:27,631:INFO:Initializing Light Gradient Boosting Machine
2024-09-16 19:08:27,631:INFO:Total runtime is 2.3392532745997108 minutes
2024-09-16 19:08:27,636:INFO:SubProcess create_model() called ==================================
2024-09-16 19:08:27,637:INFO:Initializing create_model()
2024-09-16 19:08:27,637:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217E6B65FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-16 19:08:27,637:INFO:Checking exceptions
2024-09-16 19:08:27,637:INFO:Importing libraries
2024-09-16 19:08:27,637:INFO:Copying training dataset
2024-09-16 19:08:27,645:INFO:Defining folds
2024-09-16 19:08:27,645:INFO:Declaring metric variables
2024-09-16 19:08:27,650:INFO:Importing untrained model
2024-09-16 19:08:27,655:INFO:Light Gradient Boosting Machine Imported successfully
2024-09-16 19:08:27,668:INFO:Starting cross validation
2024-09-16 19:08:27,671:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-16 19:08:41,219:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,236:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,236:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,243:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,243:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,248:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,251:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,254:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,256:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,257:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,263:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,263:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,264:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,265:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,271:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,272:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,272:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,279:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,381:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,382:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,390:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,390:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,398:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:41,399:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:43,092:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:43,168:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:43,223:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:43,226:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:43,278:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:43,331:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:43,438:INFO:Calculating mean and std
2024-09-16 19:08:43,461:INFO:Creating metrics dataframe
2024-09-16 19:08:43,525:INFO:Uploading results into container
2024-09-16 19:08:43,537:INFO:Uploading model into container now
2024-09-16 19:08:43,542:INFO:_master_model_container: 14
2024-09-16 19:08:43,543:INFO:_display_container: 2
2024-09-16 19:08:43,551:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=2469, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2024-09-16 19:08:43,552:INFO:create_model() successfully completed......................................
2024-09-16 19:08:44,663:INFO:SubProcess create_model() end ==================================
2024-09-16 19:08:44,665:INFO:Creating metrics dataframe
2024-09-16 19:08:44,872:INFO:Initializing Dummy Classifier
2024-09-16 19:08:44,876:INFO:Total runtime is 2.6266640226046243 minutes
2024-09-16 19:08:44,922:INFO:SubProcess create_model() called ==================================
2024-09-16 19:08:44,926:INFO:Initializing create_model()
2024-09-16 19:08:44,928:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000217E6B65FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-16 19:08:44,929:INFO:Checking exceptions
2024-09-16 19:08:44,931:INFO:Importing libraries
2024-09-16 19:08:44,933:INFO:Copying training dataset
2024-09-16 19:08:45,026:INFO:Defining folds
2024-09-16 19:08:45,028:INFO:Declaring metric variables
2024-09-16 19:08:45,087:INFO:Importing untrained model
2024-09-16 19:08:45,159:INFO:Dummy Classifier Imported successfully
2024-09-16 19:08:45,312:INFO:Starting cross validation
2024-09-16 19:08:45,350:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-09-16 19:08:49,794:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:49,867:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:49,912:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-16 19:08:49,945:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:50,277:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:50,353:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:50,394:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-16 19:08:50,437:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:50,534:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:50,629:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:50,679:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-16 19:08:50,718:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:50,997:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:51,082:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:51,130:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-16 19:08:51,172:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:51,358:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:51,434:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:51,475:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-16 19:08:51,514:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:52,251:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:52,312:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:52,326:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:52,361:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-16 19:08:52,378:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:52,392:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:52,400:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:52,434:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-16 19:08:52,469:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:52,472:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:52,505:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-16 19:08:52,547:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:53,678:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:53,684:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:53,686:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:53,687:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-16 19:08:53,690:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:53,693:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:53,696:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-09-16 19:08:53,699:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:08:53,706:INFO:Calculating mean and std
2024-09-16 19:08:53,708:INFO:Creating metrics dataframe
2024-09-16 19:08:53,712:INFO:Uploading results into container
2024-09-16 19:08:53,712:INFO:Uploading model into container now
2024-09-16 19:08:53,713:INFO:_master_model_container: 15
2024-09-16 19:08:53,713:INFO:_display_container: 2
2024-09-16 19:08:53,713:INFO:DummyClassifier(constant=None, random_state=2469, strategy='prior')
2024-09-16 19:08:53,713:INFO:create_model() successfully completed......................................
2024-09-16 19:08:53,993:INFO:SubProcess create_model() end ==================================
2024-09-16 19:08:53,993:INFO:Creating metrics dataframe
2024-09-16 19:08:54,051:INFO:Initializing create_model()
2024-09-16 19:08:54,051:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2469), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-09-16 19:08:54,051:INFO:Checking exceptions
2024-09-16 19:08:54,054:INFO:Importing libraries
2024-09-16 19:08:54,054:INFO:Copying training dataset
2024-09-16 19:08:54,062:INFO:Defining folds
2024-09-16 19:08:54,063:INFO:Declaring metric variables
2024-09-16 19:08:54,063:INFO:Importing untrained model
2024-09-16 19:08:54,063:INFO:Declaring custom model
2024-09-16 19:08:54,064:INFO:Ada Boost Classifier Imported successfully
2024-09-16 19:08:54,069:INFO:Cross validation set to False
2024-09-16 19:08:54,069:INFO:Fitting Model
2024-09-16 19:08:54,292:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-16 19:08:54,496:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2469)
2024-09-16 19:08:54,497:INFO:create_model() successfully completed......................................
2024-09-16 19:08:54,823:INFO:_master_model_container: 15
2024-09-16 19:08:54,823:INFO:_display_container: 2
2024-09-16 19:08:54,824:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2469)
2024-09-16 19:08:54,824:INFO:compare_models() successfully completed......................................
2024-09-16 19:09:28,733:INFO:Initializing finalize_model()
2024-09-16 19:09:28,734:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2469), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-09-16 19:09:28,734:INFO:Finalizing AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2469)
2024-09-16 19:09:28,738:INFO:Initializing create_model()
2024-09-16 19:09:28,739:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2469), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-09-16 19:09:28,739:INFO:Checking exceptions
2024-09-16 19:09:28,741:INFO:Importing libraries
2024-09-16 19:09:28,741:INFO:Copying training dataset
2024-09-16 19:09:28,741:INFO:Defining folds
2024-09-16 19:09:28,741:INFO:Declaring metric variables
2024-09-16 19:09:28,741:INFO:Importing untrained model
2024-09-16 19:09:28,741:INFO:Declaring custom model
2024-09-16 19:09:28,742:INFO:Ada Boost Classifier Imported successfully
2024-09-16 19:09:28,744:INFO:Cross validation set to False
2024-09-16 19:09:28,744:INFO:Fitting Model
2024-09-16 19:09:28,906:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-16 19:09:29,223:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Tumor Size',
                                             'Regional Node Examined',
                                             'Reginol Node Positive',
                                             'Survival Months'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fil...
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=2469))],
         verbose=False)
2024-09-16 19:09:29,223:INFO:create_model() successfully completed......................................
2024-09-16 19:09:29,474:INFO:_master_model_container: 15
2024-09-16 19:09:29,474:INFO:_display_container: 2
2024-09-16 19:09:29,548:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Tumor Size',
                                             'Regional Node Examined',
                                             'Reginol Node Positive',
                                             'Survival Months'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fil...
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 AdaBoostClassifier(algorithm='SAMME.R', estimator=None,
                                    learning_rate=1.0, n_estimators=50,
                                    random_state=2469))],
         verbose=False)
2024-09-16 19:09:29,548:INFO:finalize_model() successfully completed......................................
2024-09-16 19:09:53,128:INFO:Initializing evaluate_model()
2024-09-16 19:09:53,128:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2469), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-09-16 19:09:53,161:INFO:Initializing plot_model()
2024-09-16 19:09:53,162:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2469), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, system=True)
2024-09-16 19:09:53,162:INFO:Checking exceptions
2024-09-16 19:09:53,167:INFO:Preloading libraries
2024-09-16 19:09:53,174:INFO:Copying training dataset
2024-09-16 19:09:53,174:INFO:Plot type: pipeline
2024-09-16 19:09:53,592:INFO:Visual Rendered Successfully
2024-09-16 19:09:53,837:INFO:plot_model() successfully completed......................................
2024-09-16 19:09:56,669:INFO:Initializing plot_model()
2024-09-16 19:09:56,671:INFO:plot_model(plot=boundary, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2469), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, system=True)
2024-09-16 19:09:56,671:INFO:Checking exceptions
2024-09-16 19:09:56,684:INFO:Preloading libraries
2024-09-16 19:09:56,700:INFO:Copying training dataset
2024-09-16 19:09:56,701:INFO:Plot type: boundary
2024-09-16 19:09:56,904:INFO:Fitting StandardScaler()
2024-09-16 19:09:56,910:INFO:Fitting PCA()
2024-09-16 19:09:57,156:INFO:Fitting Model
2024-09-16 19:09:57,157:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-09-16 19:10:04,147:INFO:Visual Rendered Successfully
2024-09-16 19:10:05,324:INFO:plot_model() successfully completed......................................
2024-09-16 19:10:05,798:INFO:Initializing plot_model()
2024-09-16 19:10:05,799:INFO:plot_model(plot=feature, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2469), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, system=True)
2024-09-16 19:10:05,801:INFO:Checking exceptions
2024-09-16 19:10:05,865:INFO:Preloading libraries
2024-09-16 19:10:05,954:INFO:Copying training dataset
2024-09-16 19:10:05,955:INFO:Plot type: feature
2024-09-16 19:10:05,958:WARNING:No coef_ found. Trying feature_importances_
2024-09-16 19:10:07,676:INFO:Visual Rendered Successfully
2024-09-16 19:10:07,978:INFO:plot_model() successfully completed......................................
2024-09-16 19:10:14,742:INFO:Initializing plot_model()
2024-09-16 19:10:14,743:INFO:plot_model(plot=confusion_matrix, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2469), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, system=True)
2024-09-16 19:10:14,743:INFO:Checking exceptions
2024-09-16 19:10:14,752:INFO:Preloading libraries
2024-09-16 19:10:14,762:INFO:Copying training dataset
2024-09-16 19:10:14,762:INFO:Plot type: confusion_matrix
2024-09-16 19:10:15,124:INFO:Fitting Model
2024-09-16 19:10:15,135:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but AdaBoostClassifier was fitted with feature names
  warnings.warn(

2024-09-16 19:10:15,135:INFO:Scoring test/hold-out set
2024-09-16 19:10:15,307:INFO:Visual Rendered Successfully
2024-09-16 19:10:15,961:INFO:plot_model() successfully completed......................................
2024-09-16 19:10:26,914:INFO:Initializing predict_model()
2024-09-16 19:10:26,914:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000217E6AEC4F0>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2469), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000217EC019B80>)
2024-09-16 19:10:26,915:INFO:Checking exceptions
2024-09-16 19:10:26,915:INFO:Preloading libraries
2024-09-16 19:10:27,347:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:10:27,354:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:10:27,366:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Dead') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-09-16 19:16:00,322:WARNING:C:\Users\DELL\AppData\Local\Temp\ipykernel_10340\4241242112.py:2: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.countplot(x='Status',data=df_cancer , palette=['g','r'])

2024-09-16 19:16:12,015:WARNING:C:\Users\DELL\AppData\Local\Temp\ipykernel_10340\3174356187.py:2: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.countplot(x='Status',data=df_cancer , palette=['green','r'])

2024-09-16 19:37:29,234:WARNING:C:\Users\DELL\AppData\Local\Temp\ipykernel_10340\2383454069.py:2: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.countplot(x='Status', data=df_cancer, palette=['green', 'red'])

2024-09-16 19:37:34,382:WARNING:C:\Users\DELL\AppData\Local\Temp\ipykernel_10340\2488375524.py:3: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.countplot(x='Status', data=df_cancer, palette=['green', 'red'])

2024-09-16 19:55:24,245:WARNING:C:\Users\DELL\AppData\Local\Temp\ipykernel_10340\2074743744.py:2: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.countplot(x='Status', data=df_cancer, palette=['green', 'red'])

2024-09-16 19:58:28,044:WARNING:C:\Users\DELL\AppData\Local\Temp\ipykernel_10340\2074743744.py:2: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.countplot(x='Status', data=df_cancer, palette=['green', 'red'])

2024-09-16 20:08:08,072:WARNING:C:\Users\DELL\AppData\Local\Temp\ipykernel_10340\2446137755.py:3: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=result_for_compraing.index, y='Accuracy', data=result_for_compraing, palette="Blues_d")

2024-09-16 20:10:32,979:WARNING:C:\Users\DELL\AppData\Local\Temp\ipykernel_10340\3722537413.py:4: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=result_for_comparing.index, y=metric, data=result_for_comparing, palette=palette)

2024-09-16 20:12:22,540:WARNING:C:\Users\DELL\AppData\Local\Temp\ipykernel_10340\1606155755.py:8: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=sorted_result.index, y=metric, data=sorted_result, palette=palette)

2024-09-16 20:12:35,753:WARNING:C:\Users\DELL\AppData\Local\Temp\ipykernel_10340\1606155755.py:8: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=sorted_result.index, y=metric, data=sorted_result, palette=palette)

2024-09-16 20:12:44,252:WARNING:C:\Users\DELL\AppData\Local\Temp\ipykernel_10340\1606155755.py:8: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=sorted_result.index, y=metric, data=sorted_result, palette=palette)

2024-09-16 20:12:58,058:WARNING:C:\Users\DELL\AppData\Local\Temp\ipykernel_10340\1606155755.py:8: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=sorted_result.index, y=metric, data=sorted_result, palette=palette)

2024-09-16 20:13:16,401:WARNING:C:\Users\DELL\AppData\Local\Temp\ipykernel_10340\206353412.py:8: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=sorted_result.index, y=metric, data=sorted_result, palette=palette)

2024-09-16 20:13:20,372:WARNING:C:\Users\DELL\AppData\Local\Temp\ipykernel_10340\206353412.py:8: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=sorted_result.index, y=metric, data=sorted_result, palette=palette)

2024-09-16 20:13:25,666:WARNING:C:\Users\DELL\AppData\Local\Temp\ipykernel_10340\206353412.py:8: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=sorted_result.index, y=metric, data=sorted_result, palette=palette)

2024-09-16 20:13:31,359:WARNING:C:\Users\DELL\AppData\Local\Temp\ipykernel_10340\206353412.py:8: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=sorted_result.index, y=metric, data=sorted_result, palette=palette)

2024-09-16 20:13:31,726:WARNING:C:\Users\DELL\AppData\Local\Temp\ipykernel_10340\206353412.py:8: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=sorted_result.index, y=metric, data=sorted_result, palette=palette)

2024-09-16 20:28:26,358:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_29f598ce8cf8429a918c8101183d79e9_2071863b86a64179af882d156af2fece
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,358:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_fba772c6918841c4b9730229242ed6c4_21ce6eca4dfc43739ea85a63f8e3438b
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,359:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_29f598ce8cf8429a918c8101183d79e9_49ee7e1bab974d3996d2f7c278d6ced1
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,359:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_398ce6a6a9be404bb0b8db700e44e334_ad2d1588a28d4962afa84ff864c5773f
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,359:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_29f598ce8cf8429a918c8101183d79e9_ef41641c004440a583590bb6d7d6bf62
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,359:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_6698e5d563524b28ab8c64e68dc8d21a_ca1e6d5129cf405083abc6a8577ea42e
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,359:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_29f598ce8cf8429a918c8101183d79e9_f2c863e8013b4940a548f7d94f6ce4c2
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,359:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_44a756e06a09452db3a7ddf83fc5ca31_87af19a9b0574e5aa97fef9cbc1f85b7
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,360:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_29f598ce8cf8429a918c8101183d79e9_72cc8b72fee64ac7b1e40f0039365a85
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,360:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_ffbdc52ad87943cc92f32f95d53b3529_834e02ad472b4aaca42bc4e7889008e9
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,360:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_29f598ce8cf8429a918c8101183d79e9_cdc7b27445a54bada555d5e884c8815d
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,360:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_8604b1f6b8f74547b6d11adf4abeb558_5ff671625e8a4d20922882d260cb66b9
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,360:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_29f598ce8cf8429a918c8101183d79e9_12220332414643cba7c391cdeec24930
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,360:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_6bee5c65fe8e4890a8a32f58f863c464_cda8cf2367fe4cce9e6f2cb06a07d861
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,360:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_29f598ce8cf8429a918c8101183d79e9_d7f1c830f97a4992b0c09c5bbc3bb1a8
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,361:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_fdac9be0b28846b1954d5004f824934b_86f5bace91ae495abeea2b22402ec297
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,361:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_29f598ce8cf8429a918c8101183d79e9_beabc82f5832454b8e59cc0d8381e94a
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,361:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_6eb57bf691844d90ada9df826904a74c_02710ff7da6f41e8a03b451f1982982c
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,361:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_29f598ce8cf8429a918c8101183d79e9_cf66baa75fbb4dcb9920b777f308b027
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,361:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_4b1ff04d7257448980b173a816fcf2a1_c3038a1c76e54e24ad367dc43b2852c3
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,361:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_29f598ce8cf8429a918c8101183d79e9_c244e84cb2884251aa6323348e67df11
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,361:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_325217a7167a4f5399b50c4e2a05044b_df9e47ef18f9491f9c88859f77f4badd
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,361:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_29f598ce8cf8429a918c8101183d79e9_b72c5b9c702e4a048269a8e2e6eb5e4e
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,361:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_0fffd880249d4343b4a436135bd0b901_3ed41ff7177549bfabd1d331dfaa5ba9
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,362:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_29f598ce8cf8429a918c8101183d79e9_b5831de68d644c1584b16eea356d2806
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,362:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_68434500bc7142d1915bd5500e27a928_d820826eebcf4c54aa79f878c117382e
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,362:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_29f598ce8cf8429a918c8101183d79e9_8acb8a2a5a8040debadfdd3def890324
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,362:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_6f721361d5e448019b39a455fe70cc36_1aad2329e397462fa9a3cc8d6c51815a
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,362:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_29f598ce8cf8429a918c8101183d79e9_a985e12d290d4dbbb21cbf9b5e06014a
  warnings.warn("Failed to delete temporary folder: {}"

2024-09-16 20:28:26,362:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\joblib\_memmapping_reducer.py:611: UserWarning: Failed to delete temporary folder: C:\Users\DELL\AppData\Local\Temp\joblib_memmapping_folder_10340_29f598ce8cf8429a918c8101183d79e9_80193137e8f644a7bda2c1aee1396902
  warnings.warn("Failed to delete temporary folder: {}"

